// Gemini API service for virtual try-on functionality using @google/genai SDK
import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

export type ClothingItem = {
  name: string;
  image_url: string;
  category: string;
};

export type VirtualTryOnRequest = {
  userImageBase64: string;
  clothingItems: ClothingItem[];
};

export type VirtualTryOnResponse = {
  success: boolean;
  imageUrl?: string;
  error?: string;
};

// Convert image URL to base64 (for clothing items)
async function imageUrlToBase64(url: string): Promise<string> {
  try {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64 = reader.result as string;
        resolve(base64.split(',')[1]); // Remove data:image/jpeg;base64, prefix
      };
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    console.error('Error converting image to base64:', error);
    throw error;
  }
}

// Main function to generate virtual try-on using Gemini API
export async function generateVirtualTryOn(request: VirtualTryOnRequest): Promise<VirtualTryOnResponse> {
  if (!GEMINI_API_KEY) {
    throw new Error('Gemini API key not configured');
  }

  try {
    const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

    // Convert clothing item images to base64
    const clothingImagesBase64 = await Promise.all(
      request.clothingItems.map(item => imageUrlToBase64(item.image_url))
    );

    // Create a comprehensive prompt for virtual try-on image generation
    const prompt = `Create a realistic virtual try-on image showing a person wearing the provided clothing items. 

INSTRUCTIONS:
- Use the person from the user's photo as the base
- Digitally dress them in the provided clothing items: ${request.clothingItems.map(item => item.name).join(', ')}
- Maintain the person's body proportions, pose, and background
- Ensure the clothes fit naturally and realistically on the person
- Pay attention to proper sizing, draping, and how the fabric would fall
- Keep the lighting and style consistent with the original photo
- Make the clothing integration look seamless and natural

Clothing items to apply:
${request.clothingItems.map((item, index) => `${index + 1}. ${item.name} (${item.category})`).join('\n')}

Generate a high-quality, realistic virtual try-on image.`;

    // Prepare the content array with text prompt and images
    const content = [
      { text: prompt },
      {
        inlineData: {
          mimeType: "image/jpeg",
          data: request.userImageBase64,
        },
      },
      // Add clothing item images
      ...clothingImagesBase64.map(base64 => ({
        inlineData: {
          mimeType: "image/jpeg",
          data: base64,
        },
      }))
    ];

    // Use the image generation model
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash-image", // This model can generate images
      contents: [{ parts: content }],
    });
    console.log('Gemini response:', response);

    // Process the response - only look for generated images
    if (response.candidates && response.candidates[0] && response.candidates[0].content) {
      const parts = response.candidates[0].content.parts;
      
      if (parts) {
        for (const part of parts) {
          if (part.inlineData) {
            // Convert the generated image to a data URL
            const imageData = part.inlineData.data;
            const mimeType = part.inlineData.mimeType || 'image/png';
            const dataUrl = `data:${mimeType};base64,${imageData}`;
            
            return {
              success: true,
              imageUrl: dataUrl
            };
          }
        }
      }
    }
    
    throw new Error('No image generated by Gemini API');

  } catch (error) {
    console.error('Error generating virtual try-on:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

// Utility function to convert File to base64
export function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      const base64 = reader.result as string;
      resolve(base64.split(',')[1]); // Remove data URL prefix
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
}

// Utility function to download generated image
export function downloadGeneratedImage(dataUrl: string, filename: string = 'virtual-try-on.png') {
  const link = document.createElement('a');
  link.href = dataUrl;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}